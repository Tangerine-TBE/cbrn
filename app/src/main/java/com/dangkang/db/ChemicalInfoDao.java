package com.dangkang.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dangkang.cbrn.db.ChemicalInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHEMICAL_INFO".
*/
public class ChemicalInfoDao extends AbstractDao<ChemicalInfo, Long> {

    public static final String TABLENAME = "CHEMICAL_INFO";

    /**
     * Properties of entity ChemicalInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Charts = new Property(1, String.class, "charts", false, "CHARTS");
        public final static Property Icon = new Property(2, int.class, "icon", false, "ICON");
        public final static Property ChemicalName = new Property(3, String.class, "chemicalName", false, "CHEMICAL_NAME");
        public final static Property MinValue = new Property(4, String.class, "minValue", false, "MIN_VALUE");
        public final static Property MidValue = new Property(5, String.class, "midValue", false, "MID_VALUE");
        public final static Property MaxValue = new Property(6, String.class, "maxValue", false, "MAX_VALUE");
        public final static Property Unit = new Property(7, String.class, "unit", false, "UNIT");
    }


    public ChemicalInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ChemicalInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHEMICAL_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"CHARTS\" TEXT," + // 1: charts
                "\"ICON\" INTEGER NOT NULL ," + // 2: icon
                "\"CHEMICAL_NAME\" TEXT," + // 3: chemicalName
                "\"MIN_VALUE\" TEXT," + // 4: minValue
                "\"MID_VALUE\" TEXT," + // 5: midValue
                "\"MAX_VALUE\" TEXT," + // 6: maxValue
                "\"UNIT\" TEXT);"); // 7: unit
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHEMICAL_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChemicalInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String charts = entity.getCharts();
        if (charts != null) {
            stmt.bindString(2, charts);
        }
        stmt.bindLong(3, entity.getIcon());
 
        String chemicalName = entity.getChemicalName();
        if (chemicalName != null) {
            stmt.bindString(4, chemicalName);
        }
 
        String minValue = entity.getMinValue();
        if (minValue != null) {
            stmt.bindString(5, minValue);
        }
 
        String midValue = entity.getMidValue();
        if (midValue != null) {
            stmt.bindString(6, midValue);
        }
 
        String maxValue = entity.getMaxValue();
        if (maxValue != null) {
            stmt.bindString(7, maxValue);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChemicalInfo entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String charts = entity.getCharts();
        if (charts != null) {
            stmt.bindString(2, charts);
        }
        stmt.bindLong(3, entity.getIcon());
 
        String chemicalName = entity.getChemicalName();
        if (chemicalName != null) {
            stmt.bindString(4, chemicalName);
        }
 
        String minValue = entity.getMinValue();
        if (minValue != null) {
            stmt.bindString(5, minValue);
        }
 
        String midValue = entity.getMidValue();
        if (midValue != null) {
            stmt.bindString(6, midValue);
        }
 
        String maxValue = entity.getMaxValue();
        if (maxValue != null) {
            stmt.bindString(7, maxValue);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(8, unit);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public ChemicalInfo readEntity(Cursor cursor, int offset) {
        ChemicalInfo entity = new ChemicalInfo( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // charts
            cursor.getInt(offset + 2), // icon
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // chemicalName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // minValue
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // midValue
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // maxValue
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // unit
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChemicalInfo entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setCharts(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.getInt(offset + 2));
        entity.setChemicalName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMinValue(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMidValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMaxValue(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChemicalInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChemicalInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChemicalInfo entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
