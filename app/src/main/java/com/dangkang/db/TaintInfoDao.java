package com.dangkang.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.dangkang.cbrn.db.TaintInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TAINT_INFO".
*/
public class TaintInfoDao extends AbstractDao<TaintInfo, Long> {

    public static final String TABLENAME = "TAINT_INFO";

    /**
     * Properties of entity TaintInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Taint_num = new Property(2, String.class, "taint_num", false, "TAINT_NUM");
        public final static Property Taint_loc = new Property(3, String.class, "taint_loc", false, "TAINT_LOC");
        public final static Property Taint_sim = new Property(4, String.class, "taint_sim", false, "TAINT_SIM");
        public final static Property Taint_sim_dis = new Property(5, String.class, "taint_sim_dis", false, "TAINT_SIM_DIS");
        public final static Property Taint_dis = new Property(6, String.class, "taint_dis", false, "TAINT_DIS");
        public final static Property Taint_max = new Property(7, String.class, "taint_max", false, "TAINT_MAX");
        public final static Property Taint_unit = new Property(8, String.class, "taint_unit", false, "TAINT_UNIT");
        public final static Property Create_time = new Property(9, long.class, "create_time", false, "CREATE_TIME");
        public final static Property Normal = new Property(10, boolean.class, "normal", false, "NORMAL");
    }


    public TaintInfoDao(DaoConfig config) {
        super(config);
    }
    
    public TaintInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAINT_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"TAINT_NUM\" TEXT," + // 2: taint_num
                "\"TAINT_LOC\" TEXT," + // 3: taint_loc
                "\"TAINT_SIM\" TEXT," + // 4: taint_sim
                "\"TAINT_SIM_DIS\" TEXT," + // 5: taint_sim_dis
                "\"TAINT_DIS\" TEXT," + // 6: taint_dis
                "\"TAINT_MAX\" TEXT," + // 7: taint_max
                "\"TAINT_UNIT\" TEXT," + // 8: taint_unit
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 9: create_time
                "\"NORMAL\" INTEGER NOT NULL );"); // 10: normal
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAINT_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TaintInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String taint_num = entity.getTaint_num();
        if (taint_num != null) {
            stmt.bindString(3, taint_num);
        }
 
        String taint_loc = entity.getTaint_loc();
        if (taint_loc != null) {
            stmt.bindString(4, taint_loc);
        }
 
        String taint_sim = entity.getTaint_sim();
        if (taint_sim != null) {
            stmt.bindString(5, taint_sim);
        }
 
        String taint_sim_dis = entity.getTaint_sim_dis();
        if (taint_sim_dis != null) {
            stmt.bindString(6, taint_sim_dis);
        }
 
        String taint_dis = entity.getTaint_dis();
        if (taint_dis != null) {
            stmt.bindString(7, taint_dis);
        }
 
        String taint_max = entity.getTaint_max();
        if (taint_max != null) {
            stmt.bindString(8, taint_max);
        }
 
        String taint_unit = entity.getTaint_unit();
        if (taint_unit != null) {
            stmt.bindString(9, taint_unit);
        }
        stmt.bindLong(10, entity.getCreate_time());
        stmt.bindLong(11, entity.getNormal() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TaintInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String taint_num = entity.getTaint_num();
        if (taint_num != null) {
            stmt.bindString(3, taint_num);
        }
 
        String taint_loc = entity.getTaint_loc();
        if (taint_loc != null) {
            stmt.bindString(4, taint_loc);
        }
 
        String taint_sim = entity.getTaint_sim();
        if (taint_sim != null) {
            stmt.bindString(5, taint_sim);
        }
 
        String taint_sim_dis = entity.getTaint_sim_dis();
        if (taint_sim_dis != null) {
            stmt.bindString(6, taint_sim_dis);
        }
 
        String taint_dis = entity.getTaint_dis();
        if (taint_dis != null) {
            stmt.bindString(7, taint_dis);
        }
 
        String taint_max = entity.getTaint_max();
        if (taint_max != null) {
            stmt.bindString(8, taint_max);
        }
 
        String taint_unit = entity.getTaint_unit();
        if (taint_unit != null) {
            stmt.bindString(9, taint_unit);
        }
        stmt.bindLong(10, entity.getCreate_time());
        stmt.bindLong(11, entity.getNormal() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TaintInfo readEntity(Cursor cursor, int offset) {
        TaintInfo entity = new TaintInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // taint_num
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taint_loc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taint_sim
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // taint_sim_dis
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // taint_dis
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // taint_max
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // taint_unit
            cursor.getLong(offset + 9), // create_time
            cursor.getShort(offset + 10) != 0 // normal
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TaintInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setTaint_num(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaint_loc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaint_sim(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTaint_sim_dis(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTaint_dis(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTaint_max(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTaint_unit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreate_time(cursor.getLong(offset + 9));
        entity.setNormal(cursor.getShort(offset + 10) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TaintInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TaintInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TaintInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
